# Generated by Django 3.1.5 on 2021-02-16 05:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AffiliateProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('description', models.TextField(max_length=500, verbose_name='Description')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='affiliateprogram_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='affiliateprogram_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Affiliate Program',
                'verbose_name_plural': 'Affiliate Programs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AffiliateTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=20, verbose_name='Tag')),
                ('program', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.affiliateprogram', verbose_name='Affiliate Program')),
            ],
            options={
                'verbose_name': 'Affiliate Tag',
                'verbose_name_plural': 'Affiliate Tags',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('description', models.TextField(max_length=500, verbose_name='Description')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.ImageField(default='blog/images/default.jpg', upload_to='blog/images/', verbose_name='File')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='category_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='category_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InfoPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.ImageField(default='blog/images/default.jpg', upload_to='blog/images/', verbose_name='File')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('h1', models.CharField(max_length=50, verbose_name='H1 Tag')),
                ('meta', models.CharField(max_length=250, verbose_name='Meta Tag')),
                ('outro', tinymce.models.HTMLField(verbose_name='Conclusion')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(3000), django.core.validators.MinValueValidator(2020)], verbose_name='Year')),
                ('status', models.CharField(choices=[('D', 'Draft'), ('H', 'Hidden'), ('P', 'Published')], max_length=1, verbose_name='Status')),
                ('category', models.ManyToManyField(to='blog.Category', verbose_name='Category')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='infopost_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
            ],
            options={
                'verbose_name': 'Info Post',
                'verbose_name_plural': 'Info Posts',
            },
        ),
        migrations.CreateModel(
            name='ReviewPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.ImageField(default='blog/images/default.jpg', upload_to='blog/images/', verbose_name='File')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('h1', models.CharField(max_length=50, verbose_name='H1 Tag')),
                ('meta', models.CharField(max_length=250, verbose_name='Meta Tag')),
                ('outro', tinymce.models.HTMLField(verbose_name='Conclusion')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(3000), django.core.validators.MinValueValidator(2020)], verbose_name='Year')),
                ('status', models.CharField(choices=[('D', 'Draft'), ('H', 'Hidden'), ('P', 'Published')], max_length=1, verbose_name='Status')),
                ('category', models.ManyToManyField(to='blog.Category', verbose_name='Category')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewpost_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
            ],
            options={
                'verbose_name': 'Review Post',
                'verbose_name_plural': 'Review Posts',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('description', models.TextField(max_length=500, verbose_name='Description')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TopMoneyPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.ImageField(default='blog/images/default.jpg', upload_to='blog/images/', verbose_name='File')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('h1', models.CharField(max_length=50, verbose_name='H1 Tag')),
                ('meta', models.CharField(max_length=250, verbose_name='Meta Tag')),
                ('outro', tinymce.models.HTMLField(verbose_name='Conclusion')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(3000), django.core.validators.MinValueValidator(2020)], verbose_name='Year')),
                ('status', models.CharField(choices=[('D', 'Draft'), ('H', 'Hidden'), ('P', 'Published')], max_length=1, verbose_name='Status')),
                ('category', models.ManyToManyField(to='blog.Category', verbose_name='Category')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topmoneypost_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('tag', models.ManyToManyField(to='blog.Tag', verbose_name='Tag')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topmoneypost_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Top Money Post',
                'verbose_name_plural': 'Top Money Posts',
            },
        ),
        migrations.CreateModel(
            name='TopMoneyProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.ImageField(default='blog/images/default.jpg', upload_to='blog/images/', verbose_name='File')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', tinymce.models.HTMLField()),
                ('sku', models.CharField(max_length=50, verbose_name='Sku or Asin')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('brand', models.CharField(default='rege', max_length=20, verbose_name='Brand')),
                ('manufacturer', models.CharField(default='rege', max_length=20, verbose_name='Manufacturer')),
                ('available', models.BooleanField(default=True, verbose_name='Available')),
                ('affiliate_program', models.ManyToManyField(to='blog.AffiliateProgram', verbose_name='Affiliate Program')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topmoneyproduct_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.topmoneypost', verbose_name='Post')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topmoneyproduct_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Top Money Product',
                'verbose_name_plural': 'Top Money Products',
            },
        ),
        migrations.CreateModel(
            name='TopMoneyLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topmoneylink_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.topmoneyproduct', verbose_name='Product')),
                ('tag', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.affiliatetag', verbose_name='Affiliate Tag')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topmoneylink_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Top Money Link',
                'verbose_name_plural': 'Top Money Links',
            },
        ),
        migrations.CreateModel(
            name='ReviewProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.ImageField(default='blog/images/default.jpg', upload_to='blog/images/', verbose_name='File')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', tinymce.models.HTMLField()),
                ('sku', models.CharField(max_length=50, verbose_name='Sku or Asin')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('brand', models.CharField(default='rege', max_length=20, verbose_name='Brand')),
                ('manufacturer', models.CharField(default='rege', max_length=20, verbose_name='Manufacturer')),
                ('available', models.BooleanField(default=True, verbose_name='Available')),
                ('affiliate_program', models.ManyToManyField(to='blog.AffiliateProgram', verbose_name='Affiliate Program')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewproduct_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.reviewpost', verbose_name='Post')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewproduct_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Review Product',
                'verbose_name_plural': 'Review Products',
            },
        ),
        migrations.AddField(
            model_name='reviewpost',
            name='tag',
            field=models.ManyToManyField(to='blog.Tag', verbose_name='Tag'),
        ),
        migrations.AddField(
            model_name='reviewpost',
            name='updater',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewpost_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater'),
        ),
        migrations.CreateModel(
            name='ReviewLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewlink_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.reviewproduct', verbose_name='Product')),
                ('tag', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.affiliatetag', verbose_name='Affiliate Tag')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewlink_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Review Link',
                'verbose_name_plural': 'Review Links',
            },
        ),
        migrations.CreateModel(
            name='NormalLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='normallink_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='normallink_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Normal Link',
                'verbose_name_plural': 'Normal Links',
            },
        ),
        migrations.CreateModel(
            name='InfoProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.ImageField(default='blog/images/default.jpg', upload_to='blog/images/', verbose_name='File')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', tinymce.models.HTMLField()),
                ('sku', models.CharField(max_length=50, verbose_name='Sku or Asin')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('brand', models.CharField(default='rege', max_length=20, verbose_name='Brand')),
                ('manufacturer', models.CharField(default='rege', max_length=20, verbose_name='Manufacturer')),
                ('available', models.BooleanField(default=True, verbose_name='Available')),
                ('affiliate_program', models.ManyToManyField(to='blog.AffiliateProgram', verbose_name='Affiliate Program')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='infoproduct_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.infopost', verbose_name='Post')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='infoproduct_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Info Product',
                'verbose_name_plural': 'Info Products',
            },
        ),
        migrations.AddField(
            model_name='infopost',
            name='tag',
            field=models.ManyToManyField(to='blog.Tag', verbose_name='Tag'),
        ),
        migrations.AddField(
            model_name='infopost',
            name='updater',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='infopost_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater'),
        ),
        migrations.CreateModel(
            name='InfoLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='infolink_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.infoproduct', verbose_name='Product')),
                ('tag', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.affiliatetag', verbose_name='Affiliate Tag')),
                ('updater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='infolink_updater', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'Info Link',
                'verbose_name_plural': 'Info Links',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTopMoneyProduct',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.TextField(default='blog/images/default.jpg', max_length=100, verbose_name='File')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', tinymce.models.HTMLField()),
                ('sku', models.CharField(max_length=50, verbose_name='Sku or Asin')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('brand', models.CharField(default='rege', max_length=20, verbose_name='Brand')),
                ('manufacturer', models.CharField(default='rege', max_length=20, verbose_name='Manufacturer')),
                ('available', models.BooleanField(default=True, verbose_name='Available')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.topmoneypost', verbose_name='Post')),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Top Money Product',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTopMoneyPost',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.TextField(default='blog/images/default.jpg', max_length=100, verbose_name='File')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('h1', models.CharField(max_length=50, verbose_name='H1 Tag')),
                ('meta', models.CharField(max_length=250, verbose_name='Meta Tag')),
                ('outro', tinymce.models.HTMLField(verbose_name='Conclusion')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(3000), django.core.validators.MinValueValidator(2020)], verbose_name='Year')),
                ('status', models.CharField(choices=[('D', 'Draft'), ('H', 'Hidden'), ('P', 'Published')], max_length=1, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Top Money Post',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTopMoneyLink',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.topmoneyproduct', verbose_name='Product')),
                ('tag', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.affiliatetag', verbose_name='Affiliate Tag')),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Top Money Link',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTag',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('description', models.TextField(max_length=500, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Tag',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReviewProduct',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.TextField(default='blog/images/default.jpg', max_length=100, verbose_name='File')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', tinymce.models.HTMLField()),
                ('sku', models.CharField(max_length=50, verbose_name='Sku or Asin')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('brand', models.CharField(default='rege', max_length=20, verbose_name='Brand')),
                ('manufacturer', models.CharField(default='rege', max_length=20, verbose_name='Manufacturer')),
                ('available', models.BooleanField(default=True, verbose_name='Available')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.reviewpost', verbose_name='Post')),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Review Product',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReviewPost',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.TextField(default='blog/images/default.jpg', max_length=100, verbose_name='File')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('h1', models.CharField(max_length=50, verbose_name='H1 Tag')),
                ('meta', models.CharField(max_length=250, verbose_name='Meta Tag')),
                ('outro', tinymce.models.HTMLField(verbose_name='Conclusion')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(3000), django.core.validators.MinValueValidator(2020)], verbose_name='Year')),
                ('status', models.CharField(choices=[('D', 'Draft'), ('H', 'Hidden'), ('P', 'Published')], max_length=1, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Review Post',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReviewLink',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.reviewproduct', verbose_name='Product')),
                ('tag', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.affiliatetag', verbose_name='Affiliate Tag')),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Review Link',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNormalLink',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Normal Link',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInfoProduct',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.TextField(default='blog/images/default.jpg', max_length=100, verbose_name='File')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', tinymce.models.HTMLField()),
                ('sku', models.CharField(max_length=50, verbose_name='Sku or Asin')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('brand', models.CharField(default='rege', max_length=20, verbose_name='Brand')),
                ('manufacturer', models.CharField(default='rege', max_length=20, verbose_name='Manufacturer')),
                ('available', models.BooleanField(default=True, verbose_name='Available')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.infopost', verbose_name='Post')),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Info Product',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInfoPost',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.TextField(default='blog/images/default.jpg', max_length=100, verbose_name='File')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('h1', models.CharField(max_length=50, verbose_name='H1 Tag')),
                ('meta', models.CharField(max_length=250, verbose_name='Meta Tag')),
                ('outro', tinymce.models.HTMLField(verbose_name='Conclusion')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(3000), django.core.validators.MinValueValidator(2020)], verbose_name='Year')),
                ('status', models.CharField(choices=[('D', 'Draft'), ('H', 'Hidden'), ('P', 'Published')], max_length=1, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Info Post',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInfoLink',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('follow', models.CharField(choices=[('NF', 'No Follow'), ('DF', 'Do Follow')], max_length=10, verbose_name='Follow')),
                ('link', models.URLField(max_length=500, verbose_name='Link')),
                ('anchor_text', models.CharField(max_length=30, verbose_name='Anchor Text')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.infoproduct', verbose_name='Product')),
                ('tag', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.affiliatetag', verbose_name='Affiliate Tag')),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Info Link',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCategory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('description', models.TextField(max_length=500, verbose_name='Description')),
                ('alt_tag', models.CharField(max_length=50, null=True, verbose_name='Alt Tag')),
                ('caption', models.TextField(max_length=100, null=True, verbose_name='Caption')),
                ('file', models.TextField(default='blog/images/default.jpg', max_length=100, verbose_name='File')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Category',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAffiliateTag',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('tag', models.CharField(max_length=20, verbose_name='Tag')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='blog.affiliateprogram', verbose_name='Affiliate Program')),
            ],
            options={
                'verbose_name': 'historical Affiliate Tag',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAffiliateProgram',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Date Updated')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('description', models.TextField(max_length=500, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updater', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Updater')),
            ],
            options={
                'verbose_name': 'historical Affiliate Program',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
